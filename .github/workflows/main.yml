name: Enhanced Siegel Strategy Monitor

on:
  schedule:
    # 每周一至周五的美国市场收盘后运行 (UTC时间 21:00，对应美东时间 16:00)
    - cron: '0 21 * * 1-5'
  workflow_dispatch:  # 允许手动触发

# 添加对 issues 的写入权限
permissions:
  contents: read
  issues: write

jobs:
  run-strategy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Create data and charts directories
        run: |
          mkdir -p data
          mkdir -p charts
          
      - name: Verify data directory permissions
        run: |
          # 确保数据目录存在并有写入权限
          ls -la data/
          touch data/test_file.txt
          rm data/test_file.txt
          echo "Data directory verified"
          
      - name: Run Enhanced Siegel Strategy
        env:
          FINNHUB_API_KEY: ${{ secrets.FINNHUB_API_KEY }}
        run: |
          # 使用更详细的日志级别运行
          python run_strategy.py --no-email --force-download
          # 检查是否生成了必要的文件
          echo "检查生成的文件:"
          ls -la data/
          ls -la charts/
        continue-on-error: true  # 即使策略运行失败，也继续执行后续步骤以发送错误通知
          
      - name: Debug log if failed
        if: failure() || contains(github.step_state.failure, 'Run Enhanced Siegel Strategy')
        run: |
          echo "策略运行失败，显示日志:"
          if [ -f enhanced_siegel.log ]; then
            cat enhanced_siegel.log
          else
            echo "日志文件不存在"
          fi
          # 显示环境信息
          echo "Python版本:"
          python --version
          echo "Pandas版本:"
          pip show pandas
          
      - name: Upload charts as artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: strategy-charts
          path: |
            charts/*.png
            charts/*.html
            
      - name: Read strategy report
        id: report
        run: |
          if grep -q "数据获取错误" enhanced_siegel.log; then
            # 如果有数据获取错误，设置特殊标记
            echo "data_error=true" >> $GITHUB_OUTPUT
            echo "signal_type=数据获取错误" >> $GITHUB_OUTPUT
            echo "position=无法计算" >> $GITHUB_OUTPUT
            
            ERROR_REPORT=$(grep -A 10 "数据获取错误" enhanced_siegel.log || echo "无法获取真实市场数据")
            echo "report<<EOF" >> $GITHUB_ENV
            echo "$ERROR_REPORT" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            # 正常处理
            # 打印日志文件的前几行和后几行，用于调试
            echo "调试: 日志文件前20行"
            head -n 20 enhanced_siegel.log
            echo "调试: 日志文件后20行"
            tail -n 20 enhanced_siegel.log
            
            # 使用grep -A 100增大捕获行数，确保捕获完整报告
            REPORT=$(grep -A 100 "增强西格尔策略信号报告" enhanced_siegel.log || echo "No report found")
            echo "report<<EOF" >> $GITHUB_ENV
            echo "$REPORT" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            
            # 提取信号类型和仓位
            SIGNAL_TYPE=$(echo "$REPORT" | grep "信号类型" | cut -d':' -f2 || echo "未知信号")
            POSITION=$(echo "$REPORT" | grep "建议仓位" | cut -d':' -f2 || echo "未知仓位")
            echo "signal_type=$SIGNAL_TYPE" >> $GITHUB_OUTPUT
            echo "position=$POSITION" >> $GITHUB_OUTPUT
            echo "data_error=false" >> $GITHUB_OUTPUT
            
            # 打印提取的信号类型和仓位，用于调试
            echo "调试: 提取的信号类型 = $SIGNAL_TYPE"
            echo "调试: 提取的仓位 = $POSITION"
          fi
          
          # 设置EMAIL_RECIPIENT环境变量(如果Secret已配置)
          if [ -n "${{ secrets.EMAIL_RECIPIENT }}" ]; then
            echo "EMAIL_RECIPIENT=${{ secrets.EMAIL_RECIPIENT }}" >> $GITHUB_ENV
          else
            echo "未配置EMAIL_RECIPIENT，将不发送邮件通知"
          fi
          
          # 如果是数据错误，强制发送通知
          if [ "${{ steps.report.outputs.data_error }}" = "true" ]; then
            echo "SHOULD_NOTIFY=true" >> $GITHUB_ENV
            echo "将发送通知，因为发生了数据获取错误"
            return 0
          fi
          
          # 检查信号是否发生变化
          LAST_SIGNAL_FILE="data/last_signal.txt"
          SIGNAL_CHANGED="false"
          
          if [ -f $LAST_SIGNAL_FILE ]; then
            LAST_SIGNAL=$(cat $LAST_SIGNAL_FILE)
            if [ "$LAST_SIGNAL" != "$SIGNAL_TYPE" ]; then
              echo "信号发生变化: $LAST_SIGNAL -> $SIGNAL_TYPE"
              SIGNAL_CHANGED="true"
            else
              echo "信号未变化: $SIGNAL_TYPE"
            fi
          else
            echo "首次运行，没有历史信号记录"
            SIGNAL_CHANGED="true"
          fi
          
          # 保存当前信号
          echo "$SIGNAL_TYPE" > $LAST_SIGNAL_FILE
          
          # 检查仓位是否发生变化
          LAST_POSITION_FILE="data/last_position.txt"
          POSITION_CHANGED="false"
          
          if [ -f $LAST_POSITION_FILE ]; then
            LAST_POSITION=$(cat $LAST_POSITION_FILE)
            if [ "$LAST_POSITION" != "$POSITION" ]; then
              echo "仓位发生变化: $LAST_POSITION -> $POSITION"
              POSITION_CHANGED="true"
            else
              echo "仓位未变化: $POSITION"
            fi
          else
            echo "首次运行，没有历史仓位记录"
            POSITION_CHANGED="true"
          fi
          
          # 保存当前仓位
          echo "$POSITION" > $LAST_POSITION_FILE
          
          # 设置是否需要发送通知的环境变量
          if [ "$SIGNAL_CHANGED" = "true" ] || [ "$POSITION_CHANGED" = "true" ]; then
            echo "SHOULD_NOTIFY=true" >> $GITHUB_ENV
            echo "将发送通知，因为信号或仓位发生了变化"
          else
            echo "SHOULD_NOTIFY=false" >> $GITHUB_ENV
            echo "不发送通知，因为信号和仓位都未发生变化"
          fi
      
      # 使用 GitHub Issues 作为通知方式，只在信号或仓位变化时或有数据错误时创建
      - name: Create GitHub Issue with Strategy Report
        if: ${{ env.SHOULD_NOTIFY == 'true' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const date = new Date().toISOString().split('T')[0];
            const signalType = '${{ steps.report.outputs.signal_type }}' || '未知信号';
            const position = '${{ steps.report.outputs.position }}' || '未知仓位';
            const isDataError = '${{ steps.report.outputs.data_error }}' === 'true';
            
            let title, body;
            
            if (isDataError) {
              title = `【数据错误】增强西格尔策略 - 无法获取市场数据 (${date})`;
              body = `## 增强西格尔策略数据获取错误
              
              ${process.env.report || '无法获取真实市场数据，请检查数据源和网络连接。'}
              
              ---
              
              *此错误报告由 GitHub Actions 自动生成于 ${new Date().toISOString()}*
              *请尽快检查数据源并解决问题*`;
            } else {
              title = `【增强西格尔策略】信号更新 - ${signalType} ${position} (${date})`;
              body = `## 增强西格尔策略监控报告
              
              ${process.env.report || '无报告内容'}
              
              ---
              
              *此报告由 GitHub Actions 自动生成于 ${new Date().toISOString()}*
              *查看 [策略图表](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) 获取更多详情*`;
            }
            
            // 创建 Issue
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: isDataError ? ['data-error', 'urgent'] : ['strategy-signal', 'automated-report']
            });

      # 检查SMTP配置的完整性
      - name: Check SMTP configuration
        if: ${{ env.EMAIL_RECIPIENT != '' && env.SHOULD_NOTIFY == 'true' }}
        run: |
          # 检查SMTP配置是否完整
          if [ -z "${{ secrets.SMTP_SERVER }}" ]; then
            echo "⚠️ 警告: SMTP_SERVER 未配置，将使用默认值 smtp.gmail.com"
            echo "SMTP_SERVER=smtp.gmail.com" >> $GITHUB_ENV
          fi
          
          if [ -z "${{ secrets.SMTP_PORT }}" ]; then
            echo "⚠️ 警告: SMTP_PORT 未配置，将使用默认值 465"
            echo "SMTP_PORT=465" >> $GITHUB_ENV
          fi
          
          if [ -z "${{ secrets.EMAIL_SENDER }}" ]; then
            echo "⚠️ 警告: EMAIL_SENDER 未配置，将使用默认值 github-actions@github.com"
            echo "EMAIL_SENDER=github-actions@github.com" >> $GITHUB_ENV
          fi
          
          if [ -z "${{ secrets.EMAIL_PASSWORD }}" ]; then
            echo "⚠️ 错误: EMAIL_PASSWORD 未配置，邮件发送可能会失败"
          fi
          
          echo "📧 邮件配置检查完成"
      
      # 仅当设置了 EMAIL_RECIPIENT 且信号或仓位发生变化时才发送邮件
      - name: Send notification email
        if: ${{ env.EMAIL_RECIPIENT != '' && env.SHOULD_NOTIFY == 'true' }}
        continue-on-error: true  # 即使邮件发送失败，也继续执行后续步骤
        env:
          EMAIL_RECIPIENT: ${{ secrets.EMAIL_RECIPIENT }}
          DATA_ERROR: ${{ steps.report.outputs.data_error }}
          RUN_ID: ${{ github.run_id }}
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.EMAIL_SENDER }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: ${{ steps.report.outputs.data_error == 'true' && '【数据错误警报】增强西格尔策略 - 无法获取市场数据' || format('【增强西格尔策略】重要信号更新 - {0} {1}', steps.report.outputs.signal_type, steps.report.outputs.position) }}
          to: ${{ secrets.EMAIL_RECIPIENT }}
          from: GitHub Actions <${{ secrets.EMAIL_SENDER }}>
          body: |
            ${{ env.DATA_ERROR == 'true' && '# 增强西格尔策略数据获取错误' || '# 增强西格尔策略监控报告 - 信号变化提醒' }}
            
            ${{ env.report }}
            
            ---
            
            ${{ env.DATA_ERROR == 'true' && '此邮件由 GitHub Actions 自动发送，表明无法获取真实市场数据。请尽快检查数据源并解决问题。' || '此邮件由 GitHub Actions 自动发送，信号或仓位发生变化时才会通知，请勿回复。' }}
            查看 GitHub 仓库获取更多详情：https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          html_body: |
            <h1 style="color:#005f99;">${{ env.DATA_ERROR == 'true' && '增强西格尔策略数据获取错误' || '增强西格尔策略监控报告 - 信号变化提醒' }}</h1>
            
            <div style="background-color:#f8f9fa; padding:15px; border-left:4px solid #005f99; font-family: monospace; white-space: pre-wrap;">
            ${{ env.report }}
            </div>
            
            <hr style="margin-top:20px; margin-bottom:20px; border:0; border-top:1px solid #eee;" />
            
            <p style="font-size:14px; color:#666;">
            ${{ env.DATA_ERROR == 'true' && '此邮件由 GitHub Actions 自动发送，表明无法获取真实市场数据。请尽快检查数据源并解决问题。' || '此邮件由 GitHub Actions 自动发送，信号或仓位发生变化时才会通知，请勿回复。' }}
            </p>
            
            <p style="font-size:14px; margin-top:10px;">
            <a href="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" style="color:#0366d6; text-decoration:none;">查看 GitHub 仓库获取更多详情</a>
            </p>
            
            <p style="font-size:12px; color:#999; margin-top:20px;">
            运行ID: ${{ env.RUN_ID }} | 运行时间: ${{ github.event.repository.updated_at }}
            </p>

      # 添加邮件发送后的日志输出
      - name: Log email sending status
        if: ${{ env.EMAIL_RECIPIENT != '' && env.SHOULD_NOTIFY == 'true' }}
        run: |
          echo "邮件发送尝试完成"
          echo "如果您没有收到邮件，请检查以下几点："
          echo "1. SMTP_SERVER 和 SMTP_PORT 配置是否正确"
          echo "2. 如果使用Gmail，确保EMAIL_PASSWORD是应用专用密码"
          echo "3. 检查邮件接收方的垃圾邮件文件夹"
      
      # 显示运行结果摘要，即使没有发送通知也会显示
      - name: Show run summary
        run: |
          echo "策略运行于 $(date)"
          echo "当前信号类型: ${{ steps.report.outputs.signal_type }}"
          echo "建议仓位: ${{ steps.report.outputs.position }}"
          
          if [ "$SHOULD_NOTIFY" = "true" ]; then
            echo "✅ 信号或仓位发生变化，已发送通知"
          else
            echo "ℹ️ 信号和仓位未发生变化，未发送通知"
          fi
